name: Blue/Green Deployment to AWS ECS

on:
  pull_request:
    types:
      - closed
    branches:
      - UAT

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: '776215744471'
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lega-repo:${{ github.sha }}

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug Current Directory
      run: |
        pwd
        ls -R

    - name: Update ECS Task Definition with new image
      id: update-task-def
      run: |
        jq --arg IMAGE_URI "776215744471.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lega-repo:${{ github.sha }}" \
          '.containerDefinitions[0].image = $IMAGE_URI' ./my-task-def.json > updated-task-def.json

    # Paso previo para guardar el ARN actual antes de la actualizaci贸n
    - name: Save Previous Task Definition ARN
      id: save-previous-task-def
      run: |
        PREVIOUS_TASK_DEF_ARN=$(aws ecs describe-services \
          --cluster legal-cluster \
          --services legal-service \
          --query "services[0].taskDefinition" \
          --output text)
        echo "PREVIOUS_TASK_DEF_ARN=$PREVIOUS_TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Register the new ECS Task Definition
      id: register-task-def
      run: |
        aws ecs register-task-definition \
          --family legal-task \
          --cli-input-json file://updated-task-def.json

    - name: Update ECS service to new Task Definition
      id: update-service
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition legal-task | jq -r '.taskDefinition.taskDefinitionArn')
        aws ecs update-service \
          --cluster legal-cluster \
          --service legal-service \
          --task-definition $NEW_TASK_DEF_ARN \
          --desired-count 1

    - name: Wait for ECS service stability
      run: |
        aws ecs wait services-stable --cluster legal-cluster --services legal-service

    # Paso para verificar el despliegue y realizar rollback si falla
    - name: Verify if deployment was successful
      run: |
        DEPLOYMENT_URL="http://legal-alb-2046612139.us-east-1.elb.amazonaws.com/"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 $DEPLOYMENT_URL)

        echo "Verificando despliegue en $DEPLOYMENT_URL..."

        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Error: El despliegue fall贸 con c贸digo HTTP $HTTP_STATUS."
          echo "Iniciando rollback al ARN anterior: $PREVIOUS_TASK_DEF_ARN"

          aws ecs update-service \
            --cluster legal-cluster \
            --service legal-service \
            --task-definition $PREVIOUS_TASK_DEF_ARN \
            --desired-count 1

          exit 1
        else
          echo "El despliegue fue exitoso. C贸digo HTTP: $HTTP_STATUS"
        fi
