name: Blue/Green Deployment to AWS ECS

on:
  pull_request:
    branches:
      - UAT

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout el c贸digo
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurar Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Configurar credenciales de AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 4. Login en Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: ${{ secrets.AWS_ACCOUNT_ID }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}


    # 5. Construir y publicar la imagen de Docker
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lega-repo:${{ github.sha }}

    # 6. Validar la imagen en Amazon ECR
    - name: Validate Docker Image in ECR
      run: |
        IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lega-repo:${{ github.sha }}"
        aws ecr describe-images --repository-name lega-repo --image-ids imageTag=${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # 1. Checkout el c贸digo
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurar credenciales de AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug Current Directory
      run: |
        pwd
        ls -R

    # 3. Actualizar el archivo de definici贸n de tareas
    - name: Update ECS Task Definition with new image
      id: update-task-def
      run: |
        jq --arg IMAGE_URI "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/lega-repo:${{ github.sha }}" \
           --arg EXECUTION_ROLE_ARN "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ECS-TaskExecutionRole" \
          '.containerDefinitions[0].image = $IMAGE_URI |
           .executionRoleArn = $EXECUTION_ROLE_ARN' \
          ./my-task-def.json > updated-task-def.json

    # 4. Registrar la nueva definici贸n de tareas en ECS
    - name: Register ECS Task Definition
      id: register-task-def
      run: |
        aws ecs register-task-definition \
          --family legal-task \
          --cli-input-json file://updated-task-def.json

    # 5. Desplegar con CodeDeploy
    - name: Deploy to ECS via CodeDeploy
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition legal-task | jq -r '.taskDefinition.taskDefinitionArn')


        sed "s|PLACEHOLDER_TASK_DEFINITION|$NEW_TASK_DEF_ARN|g" appspec-template.yml > appspec.yml

        cat appspec.yml

        APPSPEC_CONTENT=$(cat appspec.yml | jq -Rs .)

        # Usar --revision con el contenido de appspec.yml
        aws deploy create-deployment \
          --application-name legal-service-test-codeD \
          --deployment-group-name legal-test--deployment-group \
          --deployment-config-name CodeDeployDefault.ECSLinear10PercentEvery1Minutes \
          --revision '{"revisionType": "AppSpecContent", "appSpecContent": {"content": '"$APPSPEC_CONTENT"'}}' \





